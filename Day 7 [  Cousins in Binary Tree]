/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool isCousins(TreeNode* root, int x, int y) {
        
        int hx=getHeight(root,x,0);
        int hy=getHeight(root,y,0);
       
        if(x==y)
            return true;
        if(hx!=hy)
            return false;
        TreeNode* par1 = new TreeNode(0,NULL,NULL);
        TreeNode* par2 = new TreeNode(0,NULL,NULL);
        par1 = getParent(root,NULL,x);
        par2 = getParent(root,NULL,y);
        // cout<<"par"<<par->val<<endl;
        if(par1==par2)
            return false;
        
        return true;
        
        
    }
    int getHeight(TreeNode* root,int x,int h)
    {
      
        if(root==NULL)
            return 0;
        if(root->val==x)
            return h;
        
      int l=getHeight(root->left,x,h+1);
          if(l!=0)
              return l;
        return getHeight(root->right,x,h+1);
      
    }
    
    TreeNode* getParent(TreeNode* root,TreeNode* par,int x)
    {
        // if(root)
            // cout<<"dd="<<root->val<<endl;
        if(root==NULL)
            return NULL;
        
        if(root->val==x)
            return par;
        
        TreeNode* temp=getParent(root->left,root,x);
         if(temp!=NULL)
             return temp;
         return  getParent(root->right,root,x);
        
    }
};
